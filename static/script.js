class KnowledgeSearch{constructor(){this.searchInput=document.getElementById('searchInput');this.results=document.getElementById('results');this.status=document.getElementById('searchStatus');this.modal=document.getElementById('contentModal');this.modalTitle=document.getElementById('modalTitle');this.modalContent=document.getElementById('modalContent');this.closeModal=document.getElementById('closeModal');this.searchTimeout=null;this.init()}init(){this.searchInput.addEventListener('input',()=>this.handleSearch());this.closeModal.addEventListener('click',()=>this.hideModal());this.modal.addEventListener('click',e=>{if(e.target===this.modal)this.hideModal()});document.addEventListener('keydown',e=>{if(e.key==='Escape')this.hideModal()})}handleSearch(){clearTimeout(this.searchTimeout);const query=this.searchInput.value.trim();if(!query){this.showWelcome();this.status.textContent='ready';return}this.status.textContent='analyzing...';this.searchTimeout=setTimeout(()=>this.performSearch(query),300)}async performSearch(query){try{const response=await fetch(`/search?q=${encodeURIComponent(query)}`);const results=await response.json();this.displayResults(results,query)}catch(error){console.error('Search error:',error);this.status.textContent='error'}finally{this.status.textContent='ready'}}displayResults(results,query){if(!results.length){this.results.innerHTML=`<div class="no-results"><h3>no results found</h3><p>try different search terms or check your knowledge base</p></div>`;return}const html=results.map(result=>`<div class="result" onclick="knowledgeSearch.showContent('${result.file}')"><div class="result-title">${this.escapeHtml(result.title)}</div><div class="result-content">${this.escapeHtml(result.content)}</div><div class="result-meta"><span>${result.file}</span><span class="similarity">${Math.round(result.similarity*100)}% match</span></div></div>`).join('');this.results.innerHTML=html}showWelcome(){this.results.innerHTML=`<div class="welcome"><h3>intelligent document analysis</h3><p>contextual understanding through vector embeddings</p><div class="features"><span class="feature">semantic search</span><span class="feature">pattern matching</span><span class="feature">private index</span></div></div>`}async showContent(filename){try{const response=await fetch(`/content/${encodeURIComponent(filename)}`);const data=await response.json();if(data.error){alert('Content not found');return}this.modalTitle.textContent=data.title;this.modalContent.innerHTML=data.content;this.modal.style.display='block';document.body.style.overflow='hidden'}catch(error){console.error('Content load error:',error);alert('Failed to load content')}}hideModal(){this.modal.style.display='none';document.body.style.overflow=''}escapeHtml(text){const div=document.createElement('div');div.textContent=text;return div.innerHTML}}const knowledgeSearch=new KnowledgeSearch();

// Circuit board generation
function initCircuitBoard(){const{floor,random}=Math;const svgCon=document.querySelector('.circuit-bg');const settings={size:25,wireMaxLen:30,stroke:'rgba(40,40,40,0.12)',pathBg:'rgba(40,40,40,0.06)',pathBloomLength:8,bloomSpeed:40,straightness:2.5};const{width,height}=document.body.getBoundingClientRect();svgCon.setAttribute('width',`${width}`);svgCon.setAttribute('height',`${height}`);const rows=floor(height/settings.size);const cols=floor(width/settings.size);let availableNum=floor(rows*cols);const cells=[];const cellsMap={};const wires=[];const dirs=[[0,1],[1,1],[1,0],[1,-1],[0,-1],[-1,-1],[-1,0],[-1,1]];class Cell{constructor(x,y){this.x=x;this.y=y;this.available=true;this.dirInd=floor(random()*dirs.length)}}class Wire{constructor(start){this.cells=[start];start.available=false;availableNum-=1}validNoCrossOver(c1,dirInd){if([0,2,4,6].includes(dirInd))return true;if(dirInd===1){const c3=cellsMap[`${c1.x},${c1.y-1}`]?.available??true;const c4=cellsMap[`${c1.x+1},${c1.y}`]?.available??true;return c3&&c4}if(dirInd===3){const c3=cellsMap[`${c1.x+1},${c1.y}`]?.available??true;const c4=cellsMap[`${c1.x},${c1.y+1}`]?.available??true;return c3&&c4}if(dirInd===5){const c3=cellsMap[`${c1.x-1},${c1.y}`]?.available??true;const c4=cellsMap[`${c1.x},${c1.y+1}`]?.available??true;return c3&&c4}if(dirInd===7){const c3=cellsMap[`${c1.x-1},${c1.y}`]?.available??true;const c4=cellsMap[`${c1.x},${c1.y-1}`]?.available??true;return c3&&c4}return false}generate(){while(this.cells.length<settings.wireMaxLen){const last=this.cells[this.cells.length-1];const tries=random()<0.5?[0,1,-1]:[0,-1,1];while(tries.length>0){let dirInd=last.dirInd+tries.splice(floor(random()**settings.straightness*tries.length),1)[0];dirInd=dirInd<0?8+dirInd:dirInd%8;const dir=dirs[dirInd];const x=last.x+dir[0];const y=last.y+dir[1];const index=y*cols+x;const next=index>=0&&index<cells.length?cells[index]:false;if(x<0||x>=cols||y<0||y>=rows||!next||!next.available||!this.validNoCrossOver(last,dirInd))continue;next.available=false;next.dirInd=dirInd;availableNum-=1;this.cells.push(next);break}if(tries.length===0)break}}draw(){const path=document.createElementNS('http://www.w3.org/2000/svg','path');const circle1=document.createElementNS('http://www.w3.org/2000/svg','circle');const circle2=document.createElementNS('http://www.w3.org/2000/svg','circle');let d='';const s=settings.size;const r=random()*(s/8)+s/16;circle1.setAttribute('r',`${r}`);circle2.setAttribute('r',`${r}`);circle1.setAttribute('stroke',settings.stroke);circle2.setAttribute('stroke',settings.stroke);circle1.setAttribute('stroke-width',`${r/6}`);circle2.setAttribute('stroke-width',`${r/4}`);const isFill=random()>0.7;circle1.setAttribute('fill',isFill?settings.stroke:'transparent');circle2.setAttribute('fill',isFill?settings.stroke:'transparent');for(let i=0;i<this.cells.length;i++){const cur=this.cells[i];if(i===0){d+=`M ${cur.x*s+s/2} ${cur.y*s+s/2}`;circle1.setAttribute('cx',`${cur.x*s+s/2}`);circle1.setAttribute('cy',`${cur.y*s+s/2}`)}if(i<this.cells.length){d+=` L ${cur.x*s+s/2} ${cur.y*s+s/2}`}if(i===this.cells.length-1){circle2.setAttribute('cx',`${cur.x*s+s/2}`);circle2.setAttribute('cy',`${cur.y*s+s/2}`)}}path.setAttribute('d',d);path.setAttribute('fill','none');path.setAttribute('stroke',settings.stroke);path.setAttribute('stroke-width',`${r*1.5}`);const isAnimated=random()>0.8;if(isAnimated){const length=path.getTotalLength?path.getTotalLength():100;path.style.cssText=`--len:${length};--len-1:${-length};--len_add_bloomLen:${length+settings.pathBloomLength};--animate-time:${(length/settings.bloomSpeed).toFixed(1)}s`;const pathBg=path.cloneNode();pathBg.setAttribute('stroke',settings.pathBg);svgCon.appendChild(pathBg);path.classList.add('animated-path-repeat')}else{path.classList.add('animated-path-once')}svgCon.appendChild(path);if(random()>0.7)svgCon.appendChild(circle1);if(random()>0.7)svgCon.appendChild(circle2)}}for(let y=0;y<rows;y++){for(let x=0;x<cols;x++){const cell=new Cell(x,y);cells.push(cell);cellsMap[`${x},${y}`]=cell}}const targetWires=Math.min(40,floor(availableNum*0.3));while(wires.length<targetWires&&availableNum>0){const cell=cells[floor(random()*cells.length)];if(!cell.available)continue;const wire=new Wire(cell);wires.push(wire);wire.generate();wire.draw()}}setTimeout(initCircuitBoard,100);
